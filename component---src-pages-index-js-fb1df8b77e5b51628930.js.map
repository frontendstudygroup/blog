{"version":3,"file":"component---src-pages-index-js-fb1df8b77e5b51628930.js","mappings":"2KAyDA,IA9CY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,uCACa,8BAASb,EAAOa,KAAhB,KADb,KAC8Cb,MAAAA,OAAA,EAAAA,EAAQc,UAAW,KADjE,KAGE,qBAAGC,KAAI,yBAAyBZ,MAAAA,OAAA,EAAAA,EAAQa,UAAR,KAAhC,yC,uDCHV,IAxCkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,sBAAIC,MAAO,CAAEC,UAAU,SAClBF,EAAMG,KAAI,SAAAC,GAAS,IAAD,EACXC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KAEpD,OACE,sBAAIC,IAAKL,EAAKG,OAAOC,MACnB,2BACErB,UAAU,iBACVuB,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIT,EAAKG,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYT,KAG/B,6BAAQD,EAAKE,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQb,EAAKE,YAAYY,aAAed,EAAKe,SAE/CL,SAAS,gBALb,UAQIV,EAAKE,YAAYc,YARrB,aAQI,EAAuBjB,KAAI,SAAAkB,GAAG,OAAI,gBAAC,IAAD,CAAOC,KAAMD,gB,6CCrBnE,IAVc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACV,gBAAC,EAAAV,KAAD,CACIC,GAAE,SAAWS,EACbC,IAAI,WACJpC,UAAU,SAETmC,K,kFCYT,UAbkB,SAAC,GAAwB,IAAD,EAArBzC,EAAqB,EAArBA,KAAM2C,EAAe,EAAfA,SACnBC,GAAY,UAAA5C,EAAKG,KAAKC,oBAAV,eAAwBoB,QAAxB,QACZL,EAAQnB,EAAK6C,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQH,SAAUA,EAAUnB,MAAOoB,GACjC,gBAAC,IAAD,CAAKpB,MAAM,cACX,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAWL,MAAOA,O","sources":["webpack://WomenWhoCodeFrontendBlog/./src/components/bio.js","webpack://WomenWhoCodeFrontendBlog/./src/components/blogItems.js","webpack://WomenWhoCodeFrontendBlog/./src/components/label.js","webpack://WomenWhoCodeFrontendBlog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}.</strong> {author?.summary || null}\n          {`. `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Label from \"../components/label\"\n\nconst BlogItems = ({ posts }) => {\n  return (\n    <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          \n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                  {\n                    post.frontmatter.tags?.map(tag => <Label text={tag} />)\n                  }\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n  )\n}\n\nexport default BlogItems\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Label = ({ text }) => (\n    <Link\n        to={`/tags/${text}`}\n        rel=\"bookmark\"\n        className=\"label\"\n    >\n        {text}\n    </Link>\n);\n\nexport default Label;","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport BlogItems from \"../components/blogItems\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <BlogItems posts={posts} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","posts","style","listStyle","map","post","title","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","tags","tag","text","rel","location","siteTitle","allMarkdownRemark","nodes"],"sourceRoot":""}